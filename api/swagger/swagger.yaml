swagger: "2.0"
info:
  title: FIDO 2
  version: "0.7.0"
  description: A secure authentication API for FIDO 2.0 / W3C WebAuthn
  contact:
    name: Adam Powers
    email: apowers@ato.ms
    # url: http://ato.ms
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
externalDocs:
  description: WebAuthn Specification
  url: https://www.w3.org/TR/webauthn/
# XXX TODO: should be parameterized
host: localhost:61904
# basePath prefixes all resource paths
basePath: /api/authn/fido/v1
#
schemes:
  # XXX TODO only TLS/https, per spec
  - http
# format of the responses to the client (Accepts)
produces:
  - application/json
tags:
  - name: register
    description: register for a new account
  - name: authn
    description: authenticate to an existing account
paths:
  /register-challenge:
    # defines the file for the controller
    x-swagger-router-controller: register
    post:
      summary: Registration Challenge Request
      tags:
        - register
      description: |
        Retreive an attestation challenge to be signed by the authenticator when making a credential.
      # defines the method name for the controller
      operationId: registerChallenge
      parameters:
        - name: msg
          in: body
          description: The registration challenge request message
          required: true
          schema:
            $ref: '#/definitions/RegistrationChallengeRequest'
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/RegistrationChallengeResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /register:
    # defines the file for the controller
    x-swagger-router-controller: register
    post:
      summary: Register
      tags:
        - register
      description: |
        Return a signed registration challenge and authenticator attestation to create an account
      # defines the method name for the controller
      operationId: register
      parameters:
        - name: msg
          in: body
          description: The registration challenge request message
          required: true
          schema:
            $ref: '#/definitions/RegistrationRequest'
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/RegistrationResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /authn-challenge:
    # defines the file for the controller
    x-swagger-router-controller: register
    post:
      summary: Authentication Challenge Request
      tags:
        - authn
      description: |
        Retreive an attestation challenge to be signed by the authenticator when making a credential.
      # defines the method name for the controller
      operationId: authnChallenge
      parameters:
        - name: msg
          in: body
          description: The registration challenge request message
          required: true
          schema:
            $ref: '#/definitions/AuthnChallengeRequest'
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/AuthnChallengeResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /authn:
    # defines the file for the controller
    x-swagger-router-controller: register
    post:
      summary: Authenticate
      tags:
        - authn
      description: |
        Return a signed registration challenge and authenticator attestation to create an account
      # defines the method name for the controller
      operationId: authn
      parameters:
        - name: msg
          in: body
          description: The registration challenge request message
          required: true
          schema:
            $ref: '#/definitions/AuthnRequest'
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/AuthnResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
definitions:
###
# Registration Challenge
###
  RegistrationChallengeRequest:
    type: object
    properties:
      header:
        $ref: '#/definitions/Header'
      userId:
        type: string
        description: Name of the account to fetch a challenge for
  RegistrationChallengeResponse:
    type: object
    properties:
      header:
        $ref: '#/definitions/Header'
      challenge:
        type: string
        format: byte # TODO: format: byte; or pattern: base64url
        description: The challenge to be signed by the authenticator
      account:
        type: object
        properties:
          rpDisplayName:
            type: string
            description: The friendly name of the Relying Party, such as "Acme Corporation", "Widgets Inc" or "Awesome Site"
          displayName:
            type: string
            description: The friendly name associated with the user account by the Relying Party, such as "John P. Smith"
          id:
            type: string
            description: An identifier for the account, specified by the Relying Party. This is not meant to be displayed to the user. It is used by the Relying Party to control the number of credentials - an authenticator will never contain more than one credential for a given Relying Party under the same id.
          name:
            type: string
            description: A detailed name for the account, such as "john.p.smith@example.com"
          imageURL:
            type: string
            description: A URL that resolves to the user’s account image. This may be a URL that can be used to retrieve an image containing the user’s current avatar, or a data URI that contains the image data.
      userId:
        type: string
        description: The user that the challenge is for
      algorithmIdentifierList:
        type: array
        items:
          type: string
      options:
        type: object
        properties:
          extensions:
            type: array
            items:
              type: object
          timeout:
            type: integer
          rpId:
            type: string
          excludeList:
            type: array
            items:
              $ref: '#/definitions/ScopedCredentialDescription'
###
# Registration Request
###
  RegistrationRequest:
    type: object
    properties:
      header:
        $ref: '#/definitions/Header'
      userId:
        type: string
        description: Name of the account to fetch a challenge
      credentialId:
        $ref: '#/definitions/CredentialID'
      publicKey:
        type: object
      attestation:
        type: object
        properties:
          format:
            type: string
          clientData:
            $ref: '#/definitions/ClientData'
          authenticatorData:
            $ref: '#/definitions/AuthenticatorData'
          attestation:
            type: object
  RegistrationResponse:
    type: object
    properties:
      status:
        $ref: '#/definitions/SuccessResponse'
###
# Authentication Challenge
###
  AuthnChallengeRequest:
    type: object
    properties:
      header:
        $ref: '#/definitions/Header'
      userId:
        type: string
        description: Name of the account to fetch a challenge for
  AuthnChallengeResponse:
    type: object
    properties:
      header:
        $ref: '#/definitions/Header'
      challenge:
        type: string
        description: The challenge to be signed by the authenticator
      userId:
        type: string
        description: The user that the challenge is for
      options:
        type: object
        properties:
          extensions:
            type: array
            items:
              type: object
          timeout:
            type: integer
          rpId:
            type: string
          allowList:
            type: array
            items:
              $ref: '#/definitions/ScopedCredentialDescription'
###
# Authentication Request
###
  AuthnRequest:
    type: object
    properties:
      header:
        $ref: '#/definitions/Header'
      userId:
        type: string
        description: Name of the account to fetch a challenge
      assertion:
        $ref: '#/definitions/WebAuthnAssertion'
  AuthnResponse:
    type: object
    properties:
      status:
        $ref: '#/definitions/SuccessResponse'
###
# Data types referenced above
###
  Header:
    type: object
    properties:
      op:
        description: The operation to be performed upon receipt of this message
        type: string
        enum:
          - Reg
          - Authn
      version:
        type: object
        properties:
          major:
            type: number
            enum:
              - 2
            # maximum: 2
            # minimum: 2
          minor:
            type: number
            enum:
              - 0
            # maximum: 0
            # minimum: 0
  ScopedCredentialDescription:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        pattern: "[a-zA-Z0-9_-]*" # base64url
      transport:
        type: array
        items:
          type: string
          enum:
            - usb
            - nfc
            - ble
  WebAuthnAssertion:
    type: object
    properties:
      credentialId:
        $ref: '#/definitions/CredentialID'
      clientData:
        $ref: '#/definitions/ClientData'
      authenticatorData:
        $ref: '#/definitions/AuthenticatorData'
      signature:
        type: string
        pattern: "[a-zA-Z0-9_-]*" # base64url
  CredentialID:
    type: string
    description: Credential ID
    pattern: "[a-zA-Z0-9_-]*" # base64url
  ClientData:
    type: string
    pattern: "[a-zA-Z0-9_-]*" # base64url
  AuthenticatorData:
    type: string
    pattern: "[a-zA-Z0-9_-]*" # base64url
###
# Success and failure messages
###
  ErrorResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
      stack:
        type: string
  SuccessResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
        enum:
          - Success
