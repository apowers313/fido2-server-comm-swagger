swagger: "2.0"
info:
  title: FIDO 2
  version: "0.7.0"
  description: A secure authentication API for FIDO 2.0 / W3C WebAuthn
  contact:
    name: Adam Powers
    email: apowers@ato.ms
    # url: http://ato.ms
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
externalDocs:
  description: WebAuthn Specification
  url: https://www.w3.org/TR/webauthn/
# XXX TODO: should be parameterized
host: localhost:61904
# basePath prefixes all resource paths
basePath: /api/authn/fido/v1
#
schemes:
  # XXX TODO only TLS/https, per spec
  - http
# format of the responses to the client (Accepts)
produces:
  - application/json
tags:
  - name: register
    description: register for a new account
  - name: authn
    description: authenticate to an existing account
paths:
  /register-challenge:
    # defines the file for the controller
    x-swagger-router-controller: register
    post:
      summary: Registration Challenge Request
      tags:
        - register
      description: |
        Retreive an attestation challenge to be signed by the authenticator when making a credential.
      # defines the method name for the controller
      operationId: registerChallenge
      parameters:
        - name: msg
          in: body
          description: The registration challenge request message
          required: true
          schema:
            $ref: '#/definitions/RegistrationChallengeRequest'
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/RegistrationChallengeResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /register:
    # defines the file for the controller
    x-swagger-router-controller: register
    post:
      summary: Register
      tags:
        - register
      description: |
        Return a signed registration challenge and authenticator attestation to create an account
      # defines the method name for the controller
      operationId: register
      parameters:
        - name: msg
          in: body
          description: The registration challenge request message
          required: true
          schema:
            $ref: '#/definitions/RegistrationRequest'
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/RegistrationResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /authn-challenge:
    # defines the file for the controller
    x-swagger-router-controller: register
    post:
      summary: Authentication Challenge Request
      tags:
        - authn
      description: |
        Retreive an attestation challenge to be signed by the authenticator when making a credential.
      # defines the method name for the controller
      operationId: authnChallenge
      parameters:
        - name: msg
          in: body
          description: The registration challenge request message
          required: true
          schema:
            $ref: '#/definitions/AuthnChallengeRequest'
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/AuthnChallengeResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /authn:
    # defines the file for the controller
    x-swagger-router-controller: register
    post:
      summary: Authenticate
      tags:
        - authn
      description: |
        Return a signed registration challenge and authenticator attestation to create an account
      # defines the method name for the controller
      operationId: authn
      parameters:
        - name: msg
          in: body
          description: The registration challenge request message
          required: true
          schema:
            $ref: '#/definitions/AuthnRequest'
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/AuthnResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
definitions:
  Header:
    type: object
    properties:
      op:
        description: The operation to be performed upon receipt of this message
        type: string
        enum: ["Reg", "Auth"]
      version:
        type: object
        properties:
          major:
            type: number
            maximum: 2
            minimum: 2
          minor:
            type: number
            maximum: 0
            minimum: 0
      appID:
        type: string
      serverData:
        type: string
  RegistrationChallengeRequest:
    type: object
    properties:
      header:
        $ref: '#/definitions/Header'
      userId:
        type: string
        description: Name of the account to fetch a challenge for
  RegistrationChallengeResponse:
    type: object
    properties:
      header:
        $ref: '#/definitions/Header'
      challenge:
        type: string
        format: byte
        description: The challenge to be signed by the authenticator
      userId:
        type: string
        description: The user that the challenge is for
      # extensions
      # timeout
      # rpId
      # authenticator excludeList
      # algorithmIdentifier list
      # id = userId
  RegistrationRequest:
    type: object
    properties:
      header:
        $ref: '#/definitions/Header'
      userId:
        type: string
        description: Name of the account to fetch a challenge
      # credential
      # publicKey
      # attestation
  RegistrationResponse:
    type: object
    properties:
      status:
        $ref: '#/definitions/SuccessResponse'
  AuthnChallengeRequest:
    type: object
    properties:
      header:
        $ref: '#/definitions/Header'
      userId:
        type: string
        description: Name of the account to fetch a challenge for
  AuthnChallengeResponse:
    type: object
    properties:
      header:
        $ref: '#/definitions/Header'
      challenge:
        type: string
        description: The challenge to be signed by the authenticator
      userId:
        type: string
        description: The user that the challenge is for
      # rpId
      # timeoutSeconds
      # allowList
      # extensions list
  AuthnRequest:
    type: object
    properties:
      header:
        $ref: '#/definitions/Header'
      userId:
        type: string
        description: Name of the account to fetch a challenge
      # credential
      # clientData
      # authenticatorData
      # signature
  AuthnResponse:
    type: object
    properties:
      status:
        $ref: '#/definitions/SuccessResponse'
  ErrorResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
      stack:
        type: string
  SuccessResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
        enum: [ "Success" ]
